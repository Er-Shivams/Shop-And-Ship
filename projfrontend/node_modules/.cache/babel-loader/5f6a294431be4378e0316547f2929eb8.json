{"ast":null,"code":"import { API } from \"../../backend\"; // API = http://localhost:8000/api/\n//getting response from the signup form to the backend\n\nexport const signup = user => {\n  return fetch(`${API}/signup`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(user)\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const signin = user => {\n  return fetch(`${API}/signin`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(user)\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n}; //for signining we have to know that user is signed in it will\n//be storing in the form of cookies or token here jwt so we are setting it up\n\nexport const authenticate = (data, next) => {\n  if (typeof window !== \"undefined\") {\n    localStorage.setItem(\"jwt\", JSON.stringify(data));\n    next();\n  }\n}; //here we simply removing those token \n\nexport const signout = next => {\n  if (typeof window !== \"undefined\") {\n    localStorage.removeItem(\"jwt\");\n    next();\n  }\n\n  return fetch(`${API}/signout`, {\n    method: \"GET\"\n  }).then(response => console.log(\"signout success\")).catch(err => console.log(err));\n};\nexport const isAuthenticated = () => {\n  if (typeof window == \"undefined\") {\n    //mistake of when we dong signout !== X  ->> \n    return false;\n  } //checking two times is token is matching with given user\n\n\n  if (localStorage.getItem(\"jwt\")) {\n    return JSON.parse(localStorage.getItem(\"jwt\"));\n  } else {\n    return false;\n  }\n};","map":{"version":3,"sources":["C:/Users/Shivam/Desktop/New folder/projfrontend/src/auth/helper/index.js"],"names":["API","signup","user","fetch","method","headers","Accept","body","JSON","stringify","then","response","json","catch","err","console","log","signin","authenticate","data","next","window","localStorage","setItem","signout","removeItem","isAuthenticated","getItem","parse"],"mappings":"AAAA,SAAQA,GAAR,QAAkB,eAAlB,C,CACA;AAEA;;AACA,OAAO,MAAMC,MAAM,GAAGC,IAAI,IAAI;AAC1B,SAAOC,KAAK,CAAE,GAAEH,GAAI,SAAR,EAAkB;AAC1BI,IAAAA,MAAM,EAAE,MADkB;AAE1BC,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,kBADH;AAEL,sBAAgB;AAFX,KAFiB;AAO1BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,IAAf;AAPoB,GAAlB,CAAL,CASNQ,IATM,CASDC,QAAQ,IAAI;AACd,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,GAXM,EAYNC,KAZM,CAYAC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAZP,CAAP;AAaH,CAdM;AAgBP,OAAO,MAAMG,MAAM,GAAGf,IAAI,IAAI;AAC1B,SAAOC,KAAK,CAAE,GAAEH,GAAI,SAAR,EAAkB;AAC1BI,IAAAA,MAAM,EAAE,MADkB;AAE1BC,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,kBADH;AAEL,sBAAgB;AAFX,KAFiB;AAO1BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,IAAf;AAPoB,GAAlB,CAAL,CASNQ,IATM,CASDC,QAAQ,IAAI;AACd,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,GAXM,EAYNC,KAZM,CAYAC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAZP,CAAP;AAaH,CAdM,C,CAgBP;AACA;;AACA,OAAO,MAAMI,YAAY,GAAG,CAACC,IAAD,EAAOC,IAAP,KAAgB;AACxC,MAAG,OAAOC,MAAP,KAAkB,WAArB,EAAiC;AAC7BC,IAAAA,YAAY,CAACC,OAAb,CAAqB,KAArB,EAA4Bf,IAAI,CAACC,SAAL,CAAeU,IAAf,CAA5B;AACAC,IAAAA,IAAI;AACP;AACJ,CALM,C,CAOP;;AACA,OAAO,MAAMI,OAAO,GAAGJ,IAAI,IAAI;AAC1B,MAAG,OAAOC,MAAP,KAAkB,WAArB,EAAiC;AAC9BC,IAAAA,YAAY,CAACG,UAAb,CAAwB,KAAxB;AACAL,IAAAA,IAAI;AACP;;AACD,SAAOjB,KAAK,CAAE,GAAEH,GAAI,UAAR,EAAmB;AAC3BI,IAAAA,MAAM,EAAE;AADmB,GAAnB,CAAL,CAGNM,IAHM,CAGDC,QAAQ,IAAII,OAAO,CAACC,GAAR,CAAY,iBAAZ,CAHX,EAINH,KAJM,CAIAC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAJP,CAAP;AAKH,CAVM;AAYP,OAAO,MAAMY,eAAe,GAAG,MAAK;AAChC,MAAG,OAAOL,MAAP,IAAiB,WAApB,EAAgC;AAAE;AAC9B,WAAO,KAAP;AACH,GAH+B,CAIhC;;;AACA,MAAGC,YAAY,CAACK,OAAb,CAAqB,KAArB,CAAH,EAA+B;AAC3B,WAAOnB,IAAI,CAACoB,KAAL,CAAWN,YAAY,CAACK,OAAb,CAAqB,KAArB,CAAX,CAAP;AACH,GAFD,MAEK;AACD,WAAO,KAAP;AACH;AACJ,CAVM","sourcesContent":["import {API} from \"../../backend\";\r\n// API = http://localhost:8000/api/\r\n\r\n//getting response from the signup form to the backend\r\nexport const signup = user => {\r\n    return fetch(`${API}/signup`, {\r\n        method: \"POST\",\r\n        headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n\r\n        body: JSON.stringify(user)\r\n    })\r\n    .then(response => {\r\n        return response.json();\r\n    })\r\n    .catch(err => console.log(err))\r\n}\r\n\r\nexport const signin = user => {\r\n    return fetch(`${API}/signin`, {\r\n        method: \"POST\",\r\n        headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n\r\n        body: JSON.stringify(user)\r\n    })\r\n    .then(response => {\r\n        return response.json();\r\n    })\r\n    .catch(err => console.log(err))\r\n}\r\n\r\n//for signining we have to know that user is signed in it will\r\n//be storing in the form of cookies or token here jwt so we are setting it up\r\nexport const authenticate = (data, next) => {\r\n    if(typeof window !== \"undefined\"){\r\n        localStorage.setItem(\"jwt\", JSON.stringify(data))\r\n        next();\r\n    }\r\n}\r\n\r\n//here we simply removing those token \r\nexport const signout = next => {\r\n     if(typeof window !== \"undefined\"){\r\n        localStorage.removeItem(\"jwt\")\r\n        next();\r\n    }\r\n    return fetch(`${API}/signout`, {\r\n        method: \"GET\" \r\n    })\r\n    .then(response => console.log(\"signout success\"))\r\n    .catch(err => console.log(err))\r\n}\r\n\r\nexport const isAuthenticated = ()=> {\r\n    if(typeof window == \"undefined\"){ //mistake of when we dong signout !== X  ->> \r\n        return false;\r\n    }\r\n    //checking two times is token is matching with given user\r\n    if(localStorage.getItem(\"jwt\")){\r\n        return JSON.parse(localStorage.getItem(\"jwt\"));\r\n    }else{\r\n        return false;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}